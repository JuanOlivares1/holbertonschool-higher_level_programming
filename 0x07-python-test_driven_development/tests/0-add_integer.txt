================================================================================
Test for "0-add_integer" module
================================================================================

    >>> add_integer = __import__('0-add_integer').add_integer

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- adding numbers:

    >>> add_integer(1, 1)
    2

    >>> add_integer(328, 172)
    500

    >>> add_integer(-1200, 988)
    -212

    >>> add_integer(-123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890)
    0

    >>> add_integer(12.999, 12.987654321)
    24

    >>> add_integer(-123456789012345678901234567890123456789012345678901234567890.0987654321, 123456789012345678901234567890123456789012345678901234567890.0987654321)
    0

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- b=98 by default

    >>> add_integer(0)
    98

    >>> add_integer(2)
    100

    >>> add_integer(2.9999999999)
    100

    >>> add_integer(2.9999999999999999)
    101

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- return value is int

    >>> type(add_integer(5, 6))
    <class 'int'>

    >>> type(add_integer(3.1416, 9.99999))
    <class 'int'>

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- Exceptions correctly raised

-->str

    >>> add_integer("hola")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("hola", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, "Hola")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("hola", 1.123)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.123, "Hola")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("hola", "soy pedro") #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be an integer

--------------------------------------------------------------------------------
-->list

    >>> add_integer(["list", 123, (1,2), 3.1416])
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(["list", 123, (1,2), 3.1416], 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, ["list", 123, (1,2), 3.1416])
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(["list", 123, (1,2), 3.1416], 1.123)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.123, ["list", 123, (1,2), 3.1416])
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(["list", 123, (1,2), 3.1416], ["list", 123, (1,2), 3.1416]) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be an integer

--------------------------------------------------------------------------------
-->tuple

    >>> add_integer((1,2,3))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer((1,2,3), 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, (1,2,3))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer((1,2,3), 1.123)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.123, (1,2,3))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer((1,2,3), (1,2,3)) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be an integer

--------------------------------------------------------------------------------
-->dictionary

    >>> add_integer({"hola": 123, "pi": 3.1416, "pedro": "navaja"})
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer({"hola": 123, "pi": 3.1416, "pedro": "navaja"}, 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, {"hola": 123, "pi": 3.1416, "pedro": "navaja"})
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer({"hola": 123, "pi": 3.1416, "pedro": "navaja"}, 1.123)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.123, {"hola": 123, "pi": 3.1416, "pedro": "navaja"})
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer({"hola": 123, "pi": 3.1416, "pedro": "navaja"}, {"hola": 123, "pi": 3.1416, "pedro": "navaja"}) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be an integer

--------------------------------------------------------------------------------
-->complex numbers

    >>> add_integer(complex(1234567890j))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(complex(1234567890j), 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, complex(1234567890j))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(complex(1234567890j), 1.123)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.123, complex(1234567890j))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(complex(1234567890j), complex(1234567890j)) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be an integer

--------------------------------------------------------------------------------
-->None

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(None, 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None, 1.123)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.123, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None, None) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be an integer


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- correct number of args
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(1, 2, 3) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but ... were given

    >>> add_integer(1, 2, 3, 4, 5, 6, 7, 8, "hola", 3.1416) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but ... were given

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- infinity
    >>> add_integer(float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float("inf"), 8)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(8, float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float("inf"), 8.1416)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(8.1416, float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float("inf"), float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

================================================================================
END OF TEST
================================================================================
