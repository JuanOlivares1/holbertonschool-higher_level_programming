================================================================================
Test for "3-say_my_name" module
================================================================================

    >>> say_my_name = __import__('3-say_my_name').say_my_name

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- normal use
    >>> say_my_name("John", "Smith")
    My name is John Smith

    >>> say_my_name("Walter", "White")
    My name is Walter White

    >>> say_my_name("Bob")
    My name is Bob 

    >>> say_my_name("Pedro ")
    My name is Pedro  

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- raise exceptions
--> type of first_name
    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(1)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(3.1416)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(complex(123456789j))
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name([1,"a", 3.124])
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name((3,4))
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name({"a":1, "b":2})
    Traceback (most recent call last):
    TypeError: first_name must be a string

--> type of second_name
    >>> say_my_name("Pepito", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("Pepito", 1)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("Pepito", 3.1416)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("Pepito", complex(123456789j))
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("Pepito", [1,"a", 3.124])
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("Pepito", (3,4))
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("Pepito", {"a":1, "b":2})
    Traceback (most recent call last):
    TypeError: last_name must be a string

--> both args incorrect
    >>> say_my_name(None, None) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string

    >>> say_my_name(1, 1) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string

    >>> say_my_name(3.1416, 3.1413) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string

    >>> say_my_name(complex(1234567890j), complex(1234567890j)) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string

    >>> say_my_name([1,2,3], [1,2,3]) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string

    >>> say_my_name((1,2,3,4), (1,2,3,4)) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string

    >>> say_my_name({"a":1, "b":2}, {"c":3, "d":4}) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: ... must be a string


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
- number of args
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

    >>> say_my_name(1,2,3,4,5,6) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: say_my_name() takes from 1 to 2 positional arguments but ... were given

================================================================================
END OF TEST
================================================================================
